name: Security Scanning Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # ÊØèÊó•ÂáåÊô®2ÁÇπÊâßË°åÂÆâÂÖ®Êâ´Êèè
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Dependency Vulnerability Scanning
  # ============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(fromJson('["full", "dependencies"]'), env.SCAN_TYPE)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        id: pnpm-audit
        run: |
          echo "üîç Running pnpm audit..."
          pnpm audit --audit-level ${{ env.SEVERITY_THRESHOLD }} --json > pnpm-audit.json || true
          
          # Parse results
          VULNERABILITIES=$(cat pnpm-audit.json | jq '.metadata.vulnerabilities | to_entries | map(select(.value > 0)) | length')
          echo "vulnerabilities_found=$VULNERABILITIES" >> $GITHUB_OUTPUT
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $VULNERABILITIES vulnerability categories"
            cat pnpm-audit.json | jq '.advisories'
          else
            echo "‚úÖ No vulnerabilities found"
          fi

      - name: Run Snyk dependency scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: >
            --severity-threshold=${{ env.SEVERITY_THRESHOLD }}
            --file=pnpm-lock.yaml
            --json-file-output=snyk-dependencies.json
        continue-on-error: true

      - name: Run OSV-Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            --lockfile=pnpm-lock.yaml
            --format=json
            --output=osv-scan.json
        continue-on-error: true

      - name: Process vulnerability results
        run: |
          echo "üìä Processing vulnerability scan results..."
          
          # Combine results from all scanners
          cat > vulnerability-summary.json << EOF
          {
            "scan_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "scanners": {
              "pnpm_audit": {
                "vulnerabilities": ${{ steps.pnpm-audit.outputs.vulnerabilities_found || 0 }},
                "report_file": "pnpm-audit.json"
              },
              "snyk": {
                "report_file": "snyk-dependencies.json"
              },
              "osv_scanner": {
                "report_file": "osv-scan.json"
              }
            }
          }
          EOF
          
          # Check for critical vulnerabilities
          CRITICAL_COUNT=0
          if [ -f "snyk-dependencies.json" ]; then
            CRITICAL_COUNT=$(cat snyk-dependencies.json | jq '.vulnerabilities[] | select(.severity == "critical") | .id' | wc -l)
          fi
          
          echo "critical_vulnerabilities=$CRITICAL_COUNT" >> $GITHUB_ENV

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-vulnerability-reports
          path: |
            pnpm-audit.json
            snyk-dependencies.json
            osv-scan.json
            vulnerability-summary.json
          retention-days: 30

      - name: Fail on critical vulnerabilities
        if: env.critical_vulnerabilities > 0
        run: |
          echo "‚ùå Critical vulnerabilities found: ${{ env.critical_vulnerabilities }}"
          echo "Review the vulnerability reports and address critical issues"
          exit 1

  # ============================================================================
  # Secret Scanning
  # ============================================================================
  secret-scan:
    name: Secret and Credential Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: contains(fromJson('["full", "secrets"]'), env.SCAN_TYPE)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for comprehensive scan

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: >
            --debug 
            --only-verified 
            --json 
            --no-update
        continue-on-error: true

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config: .gitleaks.toml
        continue-on-error: true

      - name: Scan for hardcoded credentials
        run: |
          echo "üîç Scanning for hardcoded credentials..."
          
          # Create patterns file for common secrets
          cat > secret-patterns.txt << 'EOF'
          password\s*[:=]\s*["\'][^"\']{8,}["\']
          api[_-]?key\s*[:=]\s*["\'][^"\']{16,}["\']
          secret[_-]?key\s*[:=]\s*["\'][^"\']{16,}["\']
          access[_-]?token\s*[:=]\s*["\'][^"\']{16,}["\']
          private[_-]?key\s*[:=]\s*["\'][^"\']{32,}["\']
          db[_-]?pass\s*[:=]\s*["\'][^"\']{8,}["\']
          jwt[_-]?secret\s*[:=]\s*["\'][^"\']{16,}["\']
          encryption[_-]?key\s*[:=]\s*["\'][^"\']{16,}["\']
          EOF
          
          # Search for patterns
          grep -r -E -f secret-patterns.txt . \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude-dir=.next \
            --exclude="*.log" \
            --exclude="secret-patterns.txt" \
            > potential-secrets.txt || true
          
          # Filter out obvious false positives
          grep -v "password.*example\|password.*test\|password.*demo" potential-secrets.txt > filtered-secrets.txt || true
          
          if [ -s filtered-secrets.txt ]; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found:"
            cat filtered-secrets.txt
          else
            echo "‚úÖ No obvious hardcoded secrets detected"
          fi

      - name: Check for exposed environment files
        run: |
          echo "üîç Checking for exposed environment files..."
          
          find . -name "*.env*" -type f \
            -not -path "./node_modules/*" \
            -not -path "./.git/*" \
            -not -name "*.example" \
            -not -name "*.template" > env-files.txt || true
          
          if [ -s env-files.txt ]; then
            echo "‚ö†Ô∏è Environment files found (verify they're not exposed):"
            cat env-files.txt
          else
            echo "‚úÖ No environment files found in repository"
          fi

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            potential-secrets.txt
            filtered-secrets.txt
            env-files.txt
          retention-days: 30

  # ============================================================================
  # Static Code Analysis
  # ============================================================================
  code-analysis:
    name: Static Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: contains(fromJson('["full", "code-analysis"]'), env.SCAN_TYPE)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: >
            security-and-quality,
            security-experimental

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications for analysis
        run: pnpm turbo build
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ vars.TURBO_TEAM }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: security-analysis
          upload: true

      - name: Run ESLint security analysis
        run: |
          echo "üîç Running ESLint security analysis..."
          
          # Install security-focused ESLint plugins
          pnpm add --save-dev @typescript-eslint/eslint-plugin eslint-plugin-security
          
          # Run ESLint with security rules
          pnpm exec eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --config .eslintrc.security.json \
            --format json \
            --output-file eslint-security.json || true
          
          # Process results
          if [ -f "eslint-security.json" ]; then
            SECURITY_ISSUES=$(cat eslint-security.json | jq '[.[] | .messages[] | select(.ruleId | startswith("security/"))] | length')
            echo "security_issues=$SECURITY_ISSUES" >> $GITHUB_ENV
            
            if [ "$SECURITY_ISSUES" -gt 0 ]; then
              echo "‚ö†Ô∏è Found $SECURITY_ISSUES security-related ESLint issues"
            else
              echo "‚úÖ No security issues found by ESLint"
            fi
          fi

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >
            p/security-audit
            p/secrets
            p/jwt
            p/xss
            p/sql-injection
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Authentication system security review
        run: |
          echo "üîê Reviewing authentication system security..."
          
          # Check for common auth vulnerabilities
          cat > auth-security-checks.sh << 'EOF'
          #!/bin/bash
          
          echo "Checking for authentication vulnerabilities..."
          
          # Check for weak JWT configurations
          grep -r "HS256\|none" lib/auth/ && echo "‚ö†Ô∏è Weak JWT algorithm detected" || echo "‚úÖ Strong JWT algorithm"
          
          # Check for hardcoded secrets in auth code
          grep -r "secret.*=" lib/auth/ | grep -v "process.env" && echo "‚ö†Ô∏è Hardcoded secrets in auth" || echo "‚úÖ No hardcoded secrets"
          
          # Check for proper password hashing
          grep -r "bcrypt\|scrypt\|argon2" lib/auth/ && echo "‚úÖ Secure password hashing" || echo "‚ö†Ô∏è No secure password hashing found"
          
          # Check for session security
          grep -r "httpOnly.*true" lib/auth/ && echo "‚úÖ HTTP-only cookies" || echo "‚ö†Ô∏è No HTTP-only cookies"
          grep -r "secure.*true" lib/auth/ && echo "‚úÖ Secure cookies" || echo "‚ö†Ô∏è No secure cookies"
          
          # Check for CSRF protection
          grep -r "csrf\|xsrf" . && echo "‚úÖ CSRF protection found" || echo "‚ö†Ô∏è No CSRF protection"
          
          # Check for rate limiting
          grep -r "rate.*limit" lib/auth/ && echo "‚úÖ Rate limiting implemented" || echo "‚ö†Ô∏è No rate limiting"
          EOF
          
          chmod +x auth-security-checks.sh
          ./auth-security-checks.sh > auth-security-report.txt
          cat auth-security-report.txt

      - name: Upload code analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-analysis-results
          path: |
            eslint-security.json
            auth-security-report.txt
          retention-days: 30

  # ============================================================================
  # Compliance and License Scanning
  # ============================================================================
  compliance-scan:
    name: Compliance and License Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(fromJson('["full", "compliance"]'), env.SCAN_TYPE)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run license compliance check
        run: |
          echo "üìÑ Checking license compliance..."
          
          # Install license checker
          pnpm add --save-dev license-checker
          
          # Generate license report
          pnpm exec license-checker \
            --json \
            --out license-report.json \
            --excludePrivatePackages
          
          # Check for problematic licenses
          cat license-report.json | jq -r 'to_entries[] | select(.value.licenses | test("GPL|AGPL|LGPL")) | .key + ": " + .value.licenses' > problematic-licenses.txt || true
          
          if [ -s problematic-licenses.txt ]; then
            echo "‚ö†Ô∏è Potentially problematic licenses found:"
            cat problematic-licenses.txt
          else
            echo "‚úÖ No problematic licenses detected"
          fi
          
          # Generate summary
          TOTAL_PACKAGES=$(cat license-report.json | jq 'keys | length')
          echo "Total packages: $TOTAL_PACKAGES" > license-summary.txt
          cat license-report.json | jq -r '[.[] | .licenses] | group_by(.) | map({license: .[0], count: length}) | sort_by(.count) | reverse | .[] | "\(.license): \(.count)"' >> license-summary.txt

      - name: GDPR compliance check
        run: |
          echo "üõ°Ô∏è Checking GDPR compliance indicators..."
          
          # Check for privacy-related terms
          cat > gdpr-keywords.txt << 'EOF'
          personal.*data
          user.*data
          privacy.*policy
          data.*protection
          consent
          cookie.*policy
          data.*retention
          data.*deletion
          right.*erasure
          data.*portability
          EOF
          
          # Search for privacy-related code
          grep -r -i -f gdpr-keywords.txt . \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude-dir=.next \
            --include="*.js" \
            --include="*.ts" \
            --include="*.jsx" \
            --include="*.tsx" > gdpr-findings.txt || true
          
          if [ -s gdpr-findings.txt ]; then
            echo "‚úÖ Privacy-related code found (review for GDPR compliance)"
            wc -l gdpr-findings.txt
          else
            echo "‚ö†Ô∏è No privacy-related code patterns found"
          fi

      - name: Security headers compliance
        run: |
          echo "üîí Checking security headers compliance..."
          
          # Check for security header configurations
          SECURITY_HEADERS=(
            "Strict-Transport-Security"
            "Content-Security-Policy"
            "X-Frame-Options"
            "X-Content-Type-Options"
            "Referrer-Policy"
            "Permissions-Policy"
          )
          
          echo "Security headers check:" > security-headers-report.txt
          for header in "${SECURITY_HEADERS[@]}"; do
            if grep -r -i "$header" . --exclude-dir=node_modules --exclude-dir=.git; then
              echo "‚úÖ $header: Found" >> security-headers-report.txt
            else
              echo "‚ö†Ô∏è $header: Not found" >> security-headers-report.txt
            fi
          done
          
          cat security-headers-report.txt

      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: |
            license-report.json
            license-summary.txt
            problematic-licenses.txt
            gdpr-findings.txt
            security-headers-report.txt
          retention-days: 30

  # ============================================================================
  # Container Security Scanning
  # ============================================================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: contains(fromJson('["full"]'), env.SCAN_TYPE)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images for scanning
        run: |
          echo "üê≥ Building Docker images for security scanning..."
          
          # Build a sample image for scanning
          docker build -t greenlink/investor-portal:security-scan \
            --build-arg APP_NAME=investor-portal \
            --build-arg NODE_ENV=production \
            -f apps/investor-portal/Dockerfile . || echo "Dockerfile not found - skipping container scan"

      - name: Run Trivy container scan
        if: success()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'greenlink/investor-portal:security-scan'
          format: 'json'
          output: 'trivy-container-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Run Snyk container scan
        if: success()
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: greenlink/investor-portal:security-scan
          args: --severity-threshold=medium --json-file-output=snyk-container.json
        continue-on-error: true

      - name: Process container scan results
        if: success()
        run: |
          echo "üìä Processing container scan results..."
          
          # Process Trivy results
          if [ -f "trivy-container-results.json" ]; then
            TRIVY_CRITICAL=$(cat trivy-container-results.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' | wc -l)
            TRIVY_HIGH=$(cat trivy-container-results.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' | wc -l)
            echo "Trivy scan: $TRIVY_CRITICAL critical, $TRIVY_HIGH high vulnerabilities"
          fi
          
          # Process Snyk results
          if [ -f "snyk-container.json" ]; then
            SNYK_ISSUES=$(cat snyk-container.json | jq '.vulnerabilities | length')
            echo "Snyk scan: $SNYK_ISSUES vulnerabilities found"
          fi

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results
          path: |
            trivy-container-results.json
            snyk-container.json
          retention-days: 30

  # ============================================================================
  # Security Report Generation
  # ============================================================================
  generate-security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()
    needs: [dependency-scan, secret-scan, code-analysis, compliance-scan, container-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: ./scan-results

      - name: Generate comprehensive security report
        run: |
          echo "üìä Generating comprehensive security report..."
          
          # Create security report
          cat > security-report.md << 'EOF'
          # GreenLink Capital Security Scan Report
          
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Scan Type:** ${{ env.SCAN_TYPE }}
          **Severity Threshold:** ${{ env.SEVERITY_THRESHOLD }}
          **Triggered By:** ${{ github.event_name }}
          
          ## Executive Summary
          
          This report provides a comprehensive overview of security findings across the GreenLink Capital platform.
          
          ## Scan Results Overview
          
          | Scan Type | Status | Critical | High | Medium | Low |
          |-----------|--------|----------|------|--------|-----|
          EOF
          
          # Process each scan result
          SCANS=("dependency-scan" "secret-scan" "code-analysis" "compliance-scan" "container-scan")
          
          for scan in "${SCANS[@]}"; do
            if [ "${{ needs[scan].result }}" == "success" ]; then
              STATUS="‚úÖ Passed"
            elif [ "${{ needs[scan].result }}" == "failure" ]; then
              STATUS="‚ùå Failed"
            elif [ "${{ needs[scan].result }}" == "skipped" ]; then
              STATUS="‚è≠Ô∏è Skipped"
            else
              STATUS="‚ö†Ô∏è Unknown"
            fi
            
            echo "| $scan | $STATUS | - | - | - | - |" >> security-report.md
          done
          
          # Add detailed findings
          cat >> security-report.md << 'EOF'
          
          ## Detailed Findings
          
          ### Dependency Vulnerabilities
          
          Review the uploaded dependency scan reports for detailed vulnerability information.
          
          ### Secret Scanning
          
          All detected secrets and credentials have been reported. Ensure no actual secrets are committed.
          
          ### Code Analysis
          
          Static analysis results include potential security issues in the codebase.
          
          ### Compliance
          
          License compliance and regulatory requirement checks have been performed.
          
          ## Recommendations
          
          1. **Critical Vulnerabilities**: Address all critical vulnerabilities immediately
          2. **High Vulnerabilities**: Plan remediation within 7 days
          3. **Medium Vulnerabilities**: Address within 30 days
          4. **Regular Scanning**: Maintain regular security scanning schedule
          
          ## Next Steps
          
          - Review all artifact reports attached to this workflow run
          - Create issues for critical and high-severity findings
          - Update security documentation as needed
          - Schedule follow-up scans after remediation
          
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: security-report.md
          retention-days: 90

      - name: Check for critical issues
        id: critical-check
        run: |
          CRITICAL_FOUND=false
          
          # Check each scan for critical issues
          if [ "${{ needs.dependency-scan.result }}" == "failure" ]; then
            CRITICAL_FOUND=true
          fi
          
          # Add other critical checks here
          
          echo "critical_found=$CRITICAL_FOUND" >> $GITHUB_OUTPUT

      - name: Create security issue for critical findings
        if: steps.critical-check.outputs.critical_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[SECURITY] Critical vulnerabilities found in security scan`,
              body: `## Critical Security Issues Detected
              
              **Scan Date:** ${new Date().toISOString()}
              **Workflow Run:** [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              Critical security vulnerabilities have been detected and require immediate attention.
              
              ## Required Actions
              
              - [ ] Review all security scan reports
              - [ ] Address critical vulnerabilities within 24 hours
              - [ ] Update dependencies as needed
              - [ ] Re-run security scan to verify fixes
              
              ## Scan Results
              
              Please check the workflow artifacts for detailed reports from all security scanners.
              `,
              labels: ['security', 'critical', 'vulnerability']
            });
            
            console.log(`Created security issue #${issue.data.number}`);

env:
  # Core Configuration
  NODE_VERSION: '18.17.0'
  PNPM_VERSION: '9.15.1'
  SCAN_TYPE: ${{ github.event.inputs.scan_type || 'full' }}
  SEVERITY_THRESHOLD: ${{ github.event.inputs.severity || 'medium' }}
  
  # Security Thresholds
  MAX_CRITICAL_VULNERABILITIES: 0
  MAX_HIGH_VULNERABILITIES: 5
  MAX_MEDIUM_VULNERABILITIES: 15
  
  # Notification Settings
  ENABLE_SLACK_NOTIFICATIONS: true
  ENABLE_EMAIL_NOTIFICATIONS: false
  ENABLE_GITHUB_ISSUES: true

  # ============================================================================
  # Security Notification
  # ============================================================================
  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    if: always() && (needs.generate-security-report.outputs.critical_found == 'true' || contains(needs.*.result, 'failure'))
    needs: [generate-security-report]
    
    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#greenlink-security'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          custom_payload: |
            {
              attachments: [{
                color: 'danger',
                blocks: [{
                  type: 'section',
                  text: {
                    type: 'mrkdwn',
                    text: `*üö® SECURITY ALERT*\n\nCritical security issues detected in GreenLink Capital platform.\n\n*Scan Type:* ${{ env.SCAN_TYPE }}\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Workflow:* [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n*Immediate Action Required*\n‚Ä¢ Review security scan results\n‚Ä¢ Address critical vulnerabilities\n‚Ä¢ Coordinate incident response if needed`
                  }
                }]
              }]  
            }